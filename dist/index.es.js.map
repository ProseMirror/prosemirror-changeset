{"version":3,"file":"index.es.js","sources":["../src/diff.js","../src/change.js","../src/simplify.js","../src/changeset.js"],"sourcesContent":["const IGNORED_ATTRS = {\n  blockId: true,\n}\n\nconst IGNORED_MARKS = {\n  comment: true,\n}\n\nconst getMarksString = (node) => {\n  let marksString = ''\n  let keys = Object.keys(node.marks)\n  keys.sort()\n  for (let i = 0; i < keys.length; i++) {\n    const mark = node.marks[keys[i]]\n\n    if (IGNORED_MARKS[mark.type.name]) {\n      continue\n    }\n\n    marksString += `${keys[i]}:${mark.type.name}`\n  }\n\n  return marksString\n}\n\nconst getAttributesString = (node) => {\n  let attrsString = ''\n  let keys = Object.keys(node.attrs)\n  keys.sort()\n  for (let i = 0; i < keys.length; i++) {\n    if (!IGNORED_ATTRS[keys[i]]) {\n      attrsString += `${keys[i]}:${node.attrs[keys[i]]}`\n    }\n  }\n  return attrsString\n}\n\n// Convert the given range of a fragment to tokens, where node open\n// tokens are encoded as strings holding the node name, characters as\n// their character code, and node close tokens as -1.\nfunction tokens(frag, start, end, target) {\n  for (let i = 0, off = 0; i < frag.childCount; i++) {\n    let child = frag.child(i),\n      endOff = off + child.nodeSize\n    let from = Math.max(off, start),\n      to = Math.min(endOff, end)\n    if (from < to) {\n      if (child.isText) {\n        for (let j = from; j < to; j++) target.push(`${child.text.charCodeAt(j - off)}${getMarksString(child)}`)\n      } else if (child.isLeaf) {\n        target.push(`${child.type.name}${getAttributesString(child)}`)\n      } else {\n        if (from == off) target.push(`${child.type.name}${getAttributesString(child)}`)\n        tokens(child.content, Math.max(off + 1, from) - off - 1, Math.min(endOff - 1, to) - off - 1, target)\n        if (to == endOff) target.push(-1)\n      }\n    }\n    off = endOff\n  }\n  return target\n}\n\n// This obscure mess of constants computes the minimum length of an\n// unchanged range (not at the start/end of the compared content). The\n// idea is to make it higher in bigger replacements, so that you don't\n// get a diff soup of coincidentally identical letters when replacing\n// a paragraph.\nfunction minUnchanged(sizeA, sizeB) {\n  return Math.min(15, Math.max(2, Math.floor(Math.max(sizeA, sizeB) / 10)))\n}\n\nconst FENCED_NODE_NAMES = [\n  'heading'\n]\n\n// : ([string | number]) → [[number, number, string]]\n// This function parses an array of tokens looking for ranges that represent a\n// fenced nodes, and return a list of tuples with information about those\n// nodes. Each tuple contains, in order:\n// - the start position of the node\n// - the end position of the node\n// - a hash of the content of the node\nfunction findFencedNodes(a) {\n  let from = null\n  let to = null\n  let edges = []\n  for (let i = 0, len = a.length; i < len; i++) {\n    if (typeof a[i] === 'string' && FENCED_NODE_NAMES.some(nodeName => a[i].includes(nodeName))) {\n      from = i\n    }\n    if (a[i] === -1) {\n      to = i\n      edges.push([from, to])\n      from = null\n      to = null\n    }\n  }\n  return edges.reduce((acc, [from, to]) => {\n    return [...acc, [from, to, a.slice(from, to + 1).join('-')]]\n  }, [])\n}\n\n// This is the char we replace tokens of matching fenced nodes with. The only\n// requirement is that it's not a charcode, so that we don't run the risk of\n// getting in the way of the diff algorithm when comparing characters.\nconst FORCED_MATCH_CHAR = '@'\n\nconst BOUNDARY_NODES = [\n  'heading',\n  'paragraph',\n  'ordered_list',\n  'unordered_list',\n  'box'\n]\n\nfunction splitInsertions(change, tok) {\n  const { fromB, toB, fromA, toA } = change\n  let depthCount = 0\n  let curFromA = 0\n  let curToA = toA - fromA\n  let curFromB = 0\n  let curToB = 0\n  let localDiff = []\n\n  tok.slice(fromB, toB).forEach((t) => {\n    curToB += 1\n    if (t !== -1 && BOUNDARY_NODES.some(nodeName => t.includes(nodeName))) {\n      //We found an opening token, increment the depth relative to the start of the change\n      depthCount++\n    }\n    if (t === -1) {\n      depthCount--\n      if (Math.abs(depthCount) === 1 || depthCount === 0) {\n        const slicedChange = change.slice(curFromA, curToA, curFromB, curToB)\n        localDiff.push(slicedChange)\n        curFromB = curToB\n        curFromA = curToA\n        curToA = curFromA\n      }\n    }\n  })\n  if (curFromB !== curToB) {\n    // push in remaining slice\n    localDiff.push(change.slice(curFromA, curToA, curFromB, curToB))\n  }\n  return localDiff.length > 0 ? localDiff : [change]\n}\n\n// : (Fragment, Fragment, Change) → [Change]\nexport function computeDiff(fragA, fragB, range, splitEnabled) {\n  let tokA = tokens(fragA, range.fromA, range.toA, [])\n  let tokB = tokens(fragB, range.fromB, range.toB, [])\n\n  // We want to look at fenced nodes first and match them betwen A and B.\n  // This way, we avoid changes spanning across fenced nodes that might have\n  // the same text content.\n  // For example: (diff start: →| , diff end: |←)\n  //\n  //  A                          B\n  //  ---                        ---\n  //  # February 10th, 2022      # February 17th, 2022\n  //                             # February 10th, 2022\n  //\n  //  Would compute:\n  //\n  //  # February 1→|7th, 2022\n  //  # February 1|←0th, 2022\n  //\n  //  Instead, we want it to compute:\n  //\n  //  →|# February 17th, 2022|←\n  //  # February 10th, 2022\n  //\n  let fencedNodesA = findFencedNodes(tokA)\n  let fencedNodesB = findFencedNodes(tokB)\n\n  fencedNodesA.forEach(([xFrom, xTo, xHash]) => {\n    const i = fencedNodesB.findIndex(([,, yHash]) => xHash === yHash)\n    if (i > -1) {\n      const sliced = fencedNodesB.splice(0, i + 1)\n      const [yFrom, yTo, _] = sliced[sliced.length - 1]\n      for (let xxFrom = xFrom, xxTo = xTo; xxFrom < tokA.length && xxFrom <= xxTo; xxFrom++) {\n        tokA[xxFrom] = FORCED_MATCH_CHAR\n      }\n      for (let yyFrom = yFrom, yyTo = yTo; yyFrom <= yyTo; yyFrom++) {\n        tokB[yyFrom] = FORCED_MATCH_CHAR\n      }\n    }\n  })\n\n  // Scan from both sides to cheaply eliminate work\n  let start = 0,\n    endA = tokA.length,\n    endB = tokB.length\n  while (start < tokA.length && start < tokB.length && tokA[start] === tokB[start]) start++\n  if (start === tokA.length && start === tokB.length) return []\n  while (endA > start && endB > start && tokA[endA - 1] === tokB[endB - 1]) endA--, endB--\n\n  // This is an implementation of Myers' diff algorithm\n  // See https://neil.fraser.name/writing/diff/myers.pdf and\n  // https://blog.jcoglan.com/2017/02/12/the-myers-diff-algorithm-part-1/\n\n  let n = endA - start\n  let m = endB - start\n  let max = n + m\n  let off = max + 1\n  let trace = []\n  let v = new Array(off * 2).fill(-1)\n\n  for (let d = 0; d <= max; d++) {\n    for (let k = -d; k <= d; k += 2) {\n      /*\n         The order of the elements in the array does not matter, the index, value\n         pairs are what we care about. In order to be able to store the negative values\n         for k in the indices, offset by max\n       */\n      let next = v[k + 1 + max]\n      let prev = v[k - 1 + max]\n      let x = next < prev ? prev : next + 1\n      let y = x + k\n\n      /*\n         walk all diagonals since they are free.\n         Diagonals occur when the tokens match, walking a diagonal increases x and y\n       */\n      while (x < n && y < m && tokA[start + x] === tokB[start + y]) {\n        x++\n        y++\n      }\n\n      v[k + max] = x\n\n      // Found a match\n      if (x >= n && y >= m) {\n        // Trace back through the history to build up a set of changed ranges.\n        let diff = [],\n          minSpan = minUnchanged(endA - start, endB - start)\n        // Used to add steps to a diff one at a time, back to front, merging\n        // ones that are less than minSpan tokens apart\n        let fromA = -1,\n          toA = -1,\n          fromB = -1,\n          toB = -1\n\n        let add = (fA, tA, fB, tB) => {\n          if (fromA > -1 && fromA < tA + minSpan) {\n            const gapSlice = tokA.slice(tA, fromA)\n            if (gapSlice.includes(-1) && fA !== tA) {\n              diff.push(range.slice(fromA, toA, fromB, toB))\n              fromA = fA\n              toA = tA\n              fromB = fB\n              toB = tB\n            } else {\n              fromA = fA\n              fromB = fB\n            }\n          } else {\n            if (fromA > -1) {\n              diff.push(range.slice(fromA, toA, fromB, toB))\n            }\n            fromA = fA\n            toA = tA\n            fromB = fB\n            toB = tB\n          }\n        }\n\n        for (let i = d - 1; i >= 0; i--) {\n          let next = v[k + 1 + max],\n            prev = v[k - 1 + max]\n          if (next < prev) {\n            // Deletion, resulting in an insertion\n            k--\n            x = prev + start\n            y = x + k\n            add(x, x, y, y + 1)\n          } else {\n            // Insertion, resulting in a deletion\n            k++\n            x = next + start\n            y = x + k\n            add(x, x + 1, y, y)\n          }\n          v = trace[i >> 1]\n        }\n\n        if (fromA > -1) {\n          diff.push(range.slice(fromA, toA, fromB, toB))\n        }\n\n        diff.reverse()\n\n        if (!splitEnabled) {\n          return diff\n        }\n\n        // Do a second pass to split replacements in which the inserted content spans multiples nodes into\n        // a single replacement plus one insertion for each root node inserted\n\n        const splitDiff = []\n\n        diff.forEach(change => {\n          // is it a replacement\n          if (change.inserted.length > 0) {\n            const splits = splitInsertions(change, tokB)\n            splitDiff.push(...splits)\n          } else {\n            splitDiff.push(change)\n          }\n        })\n\n        return splitDiff\n      }\n    }\n    // Since only either odd or even diagonals are read from each\n    // frontier, we only copy them every other iteration.\n    if (d % 2 === 0) trace.push(v.slice())\n  }\n  // The loop exited, meaning the maximum amount of work was done.\n  // Just return a change spanning the entire range.\n  return [range.slice(start, endA, start, endB)]\n}\n","// ::- Stores metadata for a part of a change.\nexport class Span {\n  constructor(length, data) {\n    // :: number\n    this.length = length\n    // :: any\n    this.data = data\n  }\n\n  cut(length) {\n    return length == this.length ? this : new Span(length, this.data)\n  }\n\n  toJSON() {\n    return { length: this.length, data: this.data }\n  }\n\n  static fromJSON(value) {\n    return new Span(value.length, value.data)\n  }\n\n  static slice(spans, from, to) {\n    if (from == to) return Span.none\n    if (from == 0 && to == Span.len(spans)) return spans\n    let result = []\n    for (let i = 0, off = 0; off < to; i++) {\n      let span = spans[i],\n        end = off + span.length\n      let overlap = Math.min(to, end) - Math.max(from, off)\n      if (overlap > 0) result.push(span.cut(overlap))\n      off = end\n    }\n    return result\n  }\n\n  static join(a, b, combine) {\n    if (a.length == 0) return b\n    if (b.length == 0) return a\n    let combined = combine(a[a.length - 1].data, b[0].data)\n    if (combined == null) return a.concat(b)\n    let result = a.slice(0, a.length - 1)\n    result.push(new Span(a[a.length - 1].length + b[0].length, combined))\n    for (let i = 1; i < b.length; i++) result.push(b[i])\n    return result\n  }\n\n  static len(spans) {\n    let len = 0\n    for (let i = 0; i < spans.length; i++) len += spans[i].length\n    return len\n  }\n}\n\nSpan.none = []\n\n// ::- A replaced range with metadata associated with it.\nexport class Change {\n  constructor(fromA, toA, fromB, toB, deleted, inserted) {\n    // :: number The start of the range deleted/replaced in the old\n    // document.\n    this.fromA = fromA\n    // :: number The end of the range in the old document.\n    this.toA = toA\n    // :: number The start of the range inserted in the new document.\n    this.fromB = fromB\n    // :: number The end of the range in the new document.\n    this.toB = toB\n    // :: [Span] Data associated with the deleted content. The length\n    // of these spans adds up to `this.toA - this.fromA`.\n    this.deleted = deleted\n    // :: [Span] Data associated with the inserted content. Length\n    // adds up to `this.toB - this.toA`.\n    this.inserted = inserted\n  }\n\n  get lenA() {\n    return this.toA - this.fromA\n  }\n  get lenB() {\n    return this.toB - this.fromB\n  }\n\n  toJSON() {\n    return {\n      fromA: this.fromA,\n      toA: this.toA,\n      fromB: this.fromB,\n      toB: this.toB,\n      deleted: this.deleted.map((s) => s.toJSON()),\n      inserted: this.inserted.map((s) => s.toJSON()),\n    }\n  }\n\n  static fromJSON(value) {\n    return new Change(\n      value.fromA,\n      value.toA,\n      value.fromB,\n      value.toB,\n      value.deleted.map((s) => Span.fromJSON(s)),\n      value.inserted.map((s) => Span.fromJSON(s)),\n    )\n  }\n\n  slice(startA, endA, startB, endB) {\n    if (startA == 0 && startB == 0 && endA == this.toA - this.fromA && endB == this.toB - this.fromB) return this\n    return new Change(\n      this.fromA + startA,\n      this.fromA + endA,\n      this.fromB + startB,\n      this.fromB + endB,\n      Span.slice(this.deleted, startA, endA),\n      Span.slice(this.inserted, startB, endB),\n    )\n  }\n\n  // : ([Change], [Change], (any, any) → any) → [Change]\n  // This merges two changesets (the end document of x should be the\n  // start document of y) into a single one spanning the start of x to\n  // the end of y.\n  static merge(x, y, combine) {\n    if (x.length == 0) return y\n    if (y.length == 0) return x\n\n    let result = []\n    // Iterate over both sets in parallel, using the middle coordinate\n    // system (B in x, A in y) to synchronize.\n    for (let iX = 0, iY = 0, curX = x[0], curY = y[0]; ; ) {\n      if (!curX && !curY) {\n        return result\n      } else if (curX && (!curY || curX.toB < curY.fromA)) {\n        // curX entirely in front of curY\n        let off = iY ? y[iY - 1].toB - y[iY - 1].toA : 0\n        result.push(\n          off == 0\n            ? curX\n            : new Change(curX.fromA, curX.toA, curX.fromB + off, curX.toB + off, curX.deleted, curX.inserted),\n        )\n        curX = iX++ == x.length ? null : x[iX]\n      } else if (curY && (!curX || curY.toA < curX.fromB)) {\n        // curY entirely in front of curX\n        let off = iX ? x[iX - 1].toB - x[iX - 1].toA : 0\n        result.push(\n          off == 0\n            ? curY\n            : new Change(curY.fromA - off, curY.toA - off, curY.fromB, curY.toB, curY.deleted, curY.inserted),\n        )\n        curY = iY++ == y.length ? null : y[iY]\n      } else {\n        // Touch, need to merge\n        // The rules for merging ranges are that deletions from the\n        // old set and insertions from the new are kept. Areas of the\n        // middle document covered by a but not by b are insertions\n        // from a that need to be added, and areas covered by b but\n        // not a are deletions from b that need to be added.\n        let pos = Math.min(curX.fromB, curY.fromA)\n        let fromA = Math.min(curX.fromA, curY.fromA - (iX ? x[iX - 1].toB - x[iX - 1].toA : 0)),\n          toA = fromA\n        let fromB = Math.min(curY.fromB, curX.fromB + (iY ? y[iY - 1].toB - y[iY - 1].toA : 0)),\n          toB = fromB\n        let deleted = Span.none,\n          inserted = Span.none\n\n        // Used to prevent appending ins/del range for the same Change twice\n        let enteredX = false,\n          enteredY = false\n\n        // Need to have an inner loop since any number of further\n        // ranges might be touching this group\n        for (;;) {\n          let nextX = !curX ? 2e8 : pos >= curX.fromB ? curX.toB : curX.fromB\n          let nextY = !curY ? 2e8 : pos >= curY.fromA ? curY.toA : curY.fromA\n          let next = Math.min(nextX, nextY)\n          let inX = curX && pos >= curX.fromB,\n            inY = curY && pos >= curY.fromA\n          if (!inX && !inY) break\n          if (inX && pos == curX.fromB && !enteredX) {\n            deleted = Span.join(deleted, curX.deleted, combine)\n            toA += curX.lenA\n            enteredX = true\n          }\n          if (inX && !inY) {\n            inserted = Span.join(inserted, Span.slice(curX.inserted, pos - curX.fromB, next - curX.fromB), combine)\n            toB += next - pos\n          }\n          if (inY && pos == curY.fromA && !enteredY) {\n            inserted = Span.join(inserted, curY.inserted, combine)\n            toB += curY.lenB\n            enteredY = true\n          }\n          if (inY && !inX) {\n            deleted = Span.join(deleted, Span.slice(curY.deleted, pos - curY.fromA, next - curY.fromA), combine)\n            toA += next - pos\n          }\n\n          if (inX && next == curX.toB) {\n            curX = iX++ == x.length ? null : x[iX]\n            enteredX = false\n          }\n          if (inY && next == curY.toA) {\n            curY = iY++ == y.length ? null : y[iY]\n            enteredY = false\n          }\n          pos = next\n        }\n        if (fromA < toA || fromB < toB) result.push(new Change(fromA, toA, fromB, toB, deleted, inserted))\n      }\n    }\n  }\n}\n","import {Span, Change} from \"./change\"\n\nlet letter\n// If the runtime support unicode properties in regexps, that's a good\n// source of info on whether something is a letter.\ntry { letter = new RegExp(\"[\\\\p{Alphabetic}_]\", \"u\") } catch(_) {}\n\n// Otherwise, we see if the character changes when upper/lowercased,\n// or if it is part of these common single-case scripts.\nconst nonASCIISingleCaseWordChar = /[\\u00df\\u0587\\u0590-\\u05f4\\u0600-\\u06ff\\u3040-\\u309f\\u30a0-\\u30ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\uac00-\\ud7af]/\n\nfunction isLetter(code) {\n  if (code < 128)\n    return code >= 48 && code <= 57 || code >= 65 && code <= 90 || code >= 79 && code <= 122\n  let ch = String.fromCharCode(code)\n  if (letter) return letter.test(ch)\n  return ch.toUpperCase() != ch.toLowerCase() || nonASCIISingleCaseWordChar.test(ch)\n}\n\n// Convert a range of document into a string, so that we can easily\n// access characters at a given position. Treat non-text tokens as\n// spaces so that they aren't considered part of a word.\nfunction getText(frag, start, end) {\n  let out = \"\"\n  function convert(frag, start, end) {\n    for (let i = 0, off = 0; i < frag.childCount; i++) {\n      let child = frag.child(i), endOff = off + child.nodeSize\n      let from = Math.max(off, start), to = Math.min(endOff, end)\n      if (from < to) {\n        if (child.isText) {\n          out += child.text.slice(Math.max(0, start - off), Math.min(child.text.length, end - off))\n        } else if (child.isLeaf) {\n          out += \" \"\n        } else {\n          if (from == off) out += \" \"\n          convert(child.content, Math.max(0, from - off - 1), Math.min(child.content.size, end - off))\n          if (to == endOff) out += \" \"\n        }\n      }\n      off = endOff\n    }\n  }\n  convert(frag, start, end)\n  return out\n}\n\n// The distance changes have to be apart for us to not consider them\n// candidates for merging.\nconst MAX_SIMPLIFY_DISTANCE = 30\n\n// :: ([Change], Node) → [Change]\n// Simplifies a set of changes for presentation. This makes the\n// assumption that having both insertions and deletions within a word\n// is confusing, and, when such changes occur without a word boundary\n// between them, they should be expanded to cover the entire set of\n// words (in the new document) they touch. An exception is made for\n// single-character replacements.\nexport function simplifyChanges(changes, doc) {\n  let result = []\n  for (let i = 0; i < changes.length; i++) {\n    let end = changes[i].toB, start = i\n    while (i < changes.length - 1 && changes[i + 1].fromB <= end + MAX_SIMPLIFY_DISTANCE)\n      end = changes[++i].toB\n    simplifyAdjacentChanges(changes, start, i + 1, doc, result)\n  }\n  return result\n}\n\nfunction simplifyAdjacentChanges(changes, from, to, doc, target) {\n  let start = Math.max(0, changes[from].fromB - MAX_SIMPLIFY_DISTANCE)\n  let end = Math.min(doc.content.size, changes[to - 1].toB + MAX_SIMPLIFY_DISTANCE)\n  let text = getText(doc.content, start, end)\n\n  for (let i = from; i < to; i++) {\n    let startI = i, last = changes[i], deleted = last.lenA, inserted = last.lenB\n    while (i < to - 1) {\n      let next = changes[i + 1], boundary = false\n      let prevLetter = last.toB == end ? false : isLetter(text.charCodeAt(last.toB - 1 - start))\n      for (let pos = last.toB; !boundary && pos < next.fromB; pos++) {\n        let nextLetter = pos == end ? false : isLetter(text.charCodeAt(pos - start))\n        if ((!prevLetter || !nextLetter) && pos != changes[startI].fromB) boundary = true\n        prevLetter = nextLetter\n      }\n      if (boundary) break\n      deleted += next.lenA; inserted += next.lenB\n      last = next\n      i++\n    }\n\n    if (inserted > 0 && deleted > 0 && !(inserted == 1 && deleted == 1)) {\n      let from = changes[startI].fromB, to = changes[i].toB\n      if (from < end && isLetter(text.charCodeAt(from - start)))\n        while (from > start && isLetter(text.charCodeAt(from - 1 - start))) from--\n      if (to > start && isLetter(text.charCodeAt(to - 1 - start)))\n        while (to < end && isLetter(text.charCodeAt(to - start))) to++\n      let joined = fillChange(changes.slice(startI, i + 1), from, to)\n      let last = target.length ? target[target.length - 1] : null\n      if (last && last.toA == joined.fromA)\n        target[target.length - 1] = new Change(last.fromA, joined.toA, last.fromB, joined.toB,\n                                               last.deleted.concat(joined.deleted), last.inserted.concat(joined.inserted))\n      else\n        target.push(joined)\n    } else {\n      for (let j = startI; j <= i; j++) target.push(changes[j])\n    }\n  }\n  return changes\n}\n\nfunction combine(a, b) { return a === b ? a : null }\n\nfunction fillChange(changes, fromB, toB) {\n  let fromA = changes[0].fromA - (changes[0].fromB - fromB)\n  let last = changes[changes.length - 1]\n  let toA = last.toA + (toB - last.toB)\n  let deleted = Span.none, inserted = Span.none\n  let delData = (changes[0].deleted.length ? changes[0].deleted : changes[0].inserted)[0].data\n  let insData = (changes[0].inserted.length ? changes[0].inserted : changes[0].deleted)[0].data\n  for (let posA = fromA, posB = fromB, i = 0;; i++) {\n    let next = i == changes.length ? null : changes[i]\n    let endA = next ? next.fromA : toA, endB = next ? next.fromB : toB\n    if (endA > posA) deleted = Span.join(deleted, [new Span(endA - posA, delData)], combine)\n    if (endB > posB) inserted = Span.join(inserted, [new Span(endB - posB, insData)], combine)\n    if (!next) break\n    deleted = Span.join(deleted, next.deleted, combine)\n    inserted = Span.join(inserted, next.inserted, combine)\n    if (deleted.length) delData = deleted[deleted.length - 1].data\n    if (inserted.length) insData = inserted[inserted.length - 1].data\n    posA = next.toA; posB = next.toB\n  }\n  return new Change(fromA, toA, fromB, toB, deleted, inserted)\n}\n","import { computeDiff } from './diff'\nimport { Change, Span } from './change'\nexport { Change, Span }\nexport { simplifyChanges } from './simplify'\n\n// ::- A change set tracks the changes to a document from a given\n// point in the past. It condenses a number of step maps down to a\n// flat sequence of replacements, and simplifies replacments that\n// partially undo themselves by comparing their content.\nexport class ChangeSet {\n  constructor(config, changes) {\n    this.config = config\n    // :: [Change] Replaced regions.\n    this.changes = changes\n  }\n\n  // :: (Node, [StepMap], union<[any], any>) → ChangeSet\n  // Computes a new changeset by adding the given step maps and\n  // metadata (either as an array, per-map, or as a single value to be\n  // associated with all maps) to the current set. Will not mutate the\n  // old set.\n  //\n  // Note that due to simplification that happens after each add,\n  // incrementally adding steps might create a different final set\n  // than adding all those changes at once, since different document\n  // tokens might be matched during simplification depending on the\n  // boundaries of the current changed ranges.\n  addSteps(newDoc, maps, data, steps) {\n    // This works by inspecting the position maps for the changes,\n    // which indicate what parts of the document were replaced by new\n    // content, and the size of that new content. It uses these to\n    // build up Change objects.\n    //\n    // These change objects are put in sets and merged together using\n    // Change.merge, giving us the changes created by the new steps.\n    // Those changes can then be merged with the existing set of\n    // changes.\n    //\n    // For each change that was touched by the new steps, we recompute\n    // a diff to try to minimize the change by dropping matching\n    // pieces of the old and new document from the change.\n\n    let stepChanges = []\n    // Add spans for new steps.\n    for (let i = 0; i < maps.length; i++) {\n      let d = Array.isArray(data) ? data[i] : data\n      let off = 0\n      if (!maps[i].ranges.length) {\n        const markStep = steps[i]\n        stepChanges.push(\n          new Change(\n            markStep.from + off,\n            markStep.to + off,\n            markStep.from,\n            markStep.to,\n            [new Span(markStep.to - markStep.from, d)],\n            [new Span(markStep.to - markStep.from, d)],\n          ),\n        )\n      } else {\n        maps[i].forEach((fromA, toA, fromB, toB) => {\n          stepChanges.push(\n            new Change(\n              fromA + off,\n              toA + off,\n              fromB,\n              toB,\n              fromA == toA ? Span.none : [new Span(toA - fromA, d)],\n              fromB == toB ? Span.none : [new Span(toB - fromB, d)],\n            ),\n          )\n\n          off = toB - fromB - (toA - fromA)\n        })\n      }\n    }\n    if (stepChanges.length == 0) return this\n\n    let newChanges = mergeAll(stepChanges, this.config.combine)\n    let changes = Change.merge(this.changes, newChanges, this.config.combine)\n\n    // Minimize changes when possible\n    for (let i = 0; i < changes.length; i++) {\n      let change = changes[i]\n      if (\n        change.fromA == change.toA ||\n        change.fromB == change.toB ||\n        // Only look at changes that touch newly added changed ranges\n        !newChanges.some((r) => r.toB > change.fromB && r.fromB < change.toB)\n      )\n        continue\n      let diff = computeDiff(this.config.doc.content, newDoc.content, change, this.config.splitEnabled)\n\n      // Fast path: If they are completely different, don't do anything\n      if (diff.length == 1 && diff[0].fromB == 0 && diff[0].toB == change.toB - change.fromB) continue\n\n      if (diff.length == 1) {\n        changes[i] = diff[0]\n      } else {\n        changes.splice(i, 1, ...diff)\n        i += diff.length - 1\n      }\n    }\n\n    return new ChangeSet(this.config, changes)\n  }\n\n  // :: Node\n  // The starting document of the change set.\n  get startDoc() {\n    return this.config.doc\n  }\n\n  // :: (f: (range: Change) → any) → ChangeSet\n  // Map the span's data values in the given set through a function\n  // and construct a new set with the resulting data.\n  map(f) {\n    return new ChangeSet(\n      this.config,\n      this.changes.map((change) => {\n        let data = f(change)\n        return data === change.data ? change : new Change(change.fromA, change.toA, change.fromB, change.toB, data)\n      }),\n    )\n  }\n\n  // :: (ChangeSet, ?[StepMap]) → ?{from: number, to: number}\n  // Compare two changesets and return the range in which they are\n  // changed, if any. If the document changed between the maps, pass\n  // the maps for the steps that changed it as second argument, and\n  // make sure the method is called on the old set and passed the new\n  // set. The returned positions will be in new document coordinates.\n  changedRange(b, maps) {\n    if (b == this) return null\n    let touched = maps && touchedRange(maps)\n    let moved = touched ? touched.toB - touched.fromB - (touched.toA - touched.fromA) : 0\n    function map(p) {\n      return !touched || p <= touched.fromA ? p : p + moved\n    }\n\n    let from = touched ? touched.fromB : 2e8,\n      to = touched ? touched.toB : -2e8\n    function add(start, end = start) {\n      from = Math.min(start, from)\n      to = Math.max(end, to)\n    }\n\n    let rA = this.changes,\n      rB = b.changes\n    for (let iA = 0, iB = 0; iA < rA.length && iB < rB.length; ) {\n      let rangeA = rA[iA],\n        rangeB = rB[iB]\n      if (rangeA && rangeB && sameRanges(rangeA, rangeB, map)) {\n        iA++\n        iB++\n      } else if (rangeB && (!rangeA || map(rangeA.fromB) >= rangeB.fromB)) {\n        add(rangeB.fromB, rangeB.toB)\n        iB++\n      } else {\n        add(map(rangeA.fromB), map(rangeA.toB))\n        iA++\n      }\n    }\n\n    return from <= to ? { from, to } : null\n  }\n\n  toJSON() {\n    return {\n      changes: this.changes.map((c) => c.toJSON()),\n    }\n  }\n\n  static fromJSON(doc, value, combine = (a, b) => (a === b ? a : null)) {\n    return new ChangeSet(\n      { combine, doc },\n      value.changes.map((c) => Change.fromJSON(c)),\n    )\n  }\n\n  // :: (Node, ?(a: any, b: any) → any) → ChangeSet\n  // Create a changeset with the given base object and configuration.\n  // The `combine` function is used to compare and combine metadata—it\n  // should return null when metadata isn't compatible, and a combined\n  // version for a merged range when it is.\n  static create(doc, splitEnabled = true, combine = (a, b) => (a === b ? a : null)) {\n    return new ChangeSet({ combine, doc, splitEnabled }, [])\n  }\n}\n\n// Exported for testing\nChangeSet.computeDiff = computeDiff\n\n// : ([[Change]], (any, any) → any, number, number) → [Change]\n// Divide-and-conquer approach to merging a series of ranges.\nfunction mergeAll(ranges, combine, start = 0, end = ranges.length) {\n  if (end == start + 1) return [ranges[start]]\n  let mid = (start + end) >> 1\n  return Change.merge(mergeAll(ranges, combine, start, mid), mergeAll(ranges, combine, mid, end), combine)\n}\n\nfunction endRange(maps) {\n  let from = 2e8,\n    to = -2e8\n  for (let i = 0; i < maps.length; i++) {\n    let map = maps[i]\n    if (from != 2e8) {\n      from = map.map(from, -1)\n      to = map.map(to, 1)\n    }\n    map.forEach((_s, _e, start, end) => {\n      from = Math.min(from, start)\n      to = Math.max(to, end)\n    })\n  }\n  return from == 2e8 ? null : { from, to }\n}\n\nfunction touchedRange(maps) {\n  let b = endRange(maps)\n  if (!b) return null\n  let a = endRange(maps.map((m) => m.invert()).reverse())\n  return { fromA: a.from, toA: a.to, fromB: b.from, toB: b.to }\n}\n\nfunction sameRanges(a, b, map) {\n  return (\n    map(a.fromB) == b.fromB &&\n    map(a.toB) == b.toB &&\n    sameSpans(a.deleted, b.deleted) &&\n    sameSpans(a.inserted, b.inserted)\n  )\n}\n\nfunction sameSpans(a, b) {\n  if (a.length != b.length) return false\n  for (let i = 0; i < a.length; i++) if (a[i].length != b[i].length || a[i].data !== b[i].data) return false\n  return true\n}\n"],"names":["const","let","i","len","next","prev","prototypeAccessors","off","from","to","last","this"],"mappings":"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"}